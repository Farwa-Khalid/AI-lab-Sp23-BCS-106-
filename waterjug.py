# -*- coding: utf-8 -*-
"""WaterJug.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1K6RA43sfndSGkGg4RDtf8ZDHbP8QJjWl

**BFS**
"""

from collections import deque

JUG1 = 4
JUG2 = 3
GOAL = 1

def water_jug_bfs():
    start = (0, 0)
    visited = set()
    queue = deque([[start]])

    while queue:
        path = queue.popleft()
        state = path[-1]

        if state[0] == GOAL or state[1] == GOAL:
            return path

        if state in visited:
            continue
        visited.add(state)

        x, y = state

        next_states = [
            (JUG1, y),
            (x, JUG2),
            (0, y),
            (x, 0),
            (x - min(x, JUG2 - y), y + min(x, JUG2 - y)),
            (x + min(y, JUG1 - x), y - min(y, JUG1 - x))
        ]

        for nxt in next_states:
            if nxt not in visited:
                new_path = list(path)
                new_path.append(nxt)
                queue.append(new_path)
    return None

solution = water_jug_bfs()
print("BFS Solution path:")
for step in solution:
    print(step)

"""**DFS**"""

def water_jug_dfs():
    start = (0, 0)
    stack = [[start]]
    visited = set()

    while stack:
        path = stack.pop()
        state = path[-1]

        if state[0] == GOAL or state[1] == GOAL:
            return path

        if state in visited:
            continue
        visited.add(state)

        x, y = state

        next_states = [
            (JUG1, y),
            (x, JUG2),
            (0, y),
            (x, 0),
            (x - min(x, JUG2 - y), y + min(x, JUG2 - y)),
            (x + min(y, JUG1 - x), y - min(y, JUG1 - x))
        ]

        for nxt in next_states:
            if nxt not in visited:
                new_path = list(path)
                new_path.append(nxt)
                stack.append(new_path)
    return None

solution = water_jug_dfs()
print("DFS Solution path:")
for step in solution:
    print(step)

"""**Asteric Algorithm**"""

import heapq

def heuristic(state):
    x, y = state
    return min(abs(x - GOAL), abs(y - GOAL))

def a_star_water_jug():
    start = (0, 0)
    open_list = []
    heapq.heappush(open_list, (heuristic(start), 0, [start]))
    visited = {}

    while open_list:
        f, g, path = heapq.heappop(open_list)
        state = path[-1]

        if state[0] == GOAL or state[1] == GOAL:
            return path

        if state in visited and visited[state] <= g:
            continue
        visited[state] = g

        x, y = state
        next_states = [
            (JUG1, y),
            (x, JUG2),
            (0, y),
            (x, 0),
            (x - min(x, JUG2 - y), y + min(x, JUG2 - y)),
            (x + min(y, JUG1 - x), y - min(y, JUG1 - x))
        ]

        for nxt in next_states:
            if nxt not in visited or g + 1 < visited.get(nxt, float('inf')):
                new_path = list(path)
                new_path.append(nxt)
                new_g = g + 1
                new_f = new_g + heuristic(nxt)
                heapq.heappush(open_list, (new_f, new_g, new_path))

solution = a_star_water_jug()
print("A* Solution path:")
for step in solution:
    print(step)

"""Compare the solution paths found by BFS, DFS, and A*. **bold text**
Comparison of BFS, DFS, and A* Search Algorithms (Water Jug Problem)
1. Breadth-First Search (BFS)

Solution Path: Always finds the shortest path to the goal because it explores states level by level.

Optimality: Guarantees the shortest solution path.

Time Complexity:
𝑂
(
𝑏
𝑑
)
O(b
d
), where
𝑏
b is the branching factor and
𝑑
d is the depth of the shallowest solution.

Space Complexity:
𝑂
(
𝑏
𝑑
)
O(b
d
), as all nodes at the current level are stored in memory.

Efficiency: Effective for small state spaces but memory-intensive for larger problems.

2. Depth-First Search (DFS)

Solution Path: May find a solution but not necessarily the shortest one, as it explores one branch deeply before backtracking.

Optimality: Not guaranteed to return the shortest path.

Time Complexity:
𝑂
(
𝑏
𝑚
)
O(b
m
), where
𝑚
m is the maximum depth of the search tree.

Space Complexity:
𝑂
(
𝑏
𝑚
)
O(bm), as it only stores the current path and unexplored siblings.

Efficiency: Memory-efficient, but can be time-inefficient, especially if the goal lies at shallow depth while the algorithm explores deep irrelevant paths.

3. A* Search Algorithm

Solution Path: Finds the shortest path using a heuristic to guide the search.

Optimality: Guarantees optimal solution if the heuristic is admissible (never overestimates the cost).

Time Complexity:
𝑂
(
𝑏
𝑑
)
O(b
d
) in the worst case, but usually explores fewer states than BFS due to heuristic guidance.

Space Complexity: Higher than DFS, as it maintains both open and closed lists, but typically better than BFS for large problems.

Efficiency: More efficient than BFS in practice because it prioritizes promising states, reducing unnecessary exploration.

**Which algorithm gives the shortest path? Why?**
BFS and A* both give the shortest path (3 steps).

BFS guarantees shortest because it explores level by level.

A* guarantees shortest if the heuristic is admissible (never overestimates the cost).

**Which algorithm is more efficient in terms of time and memory?**
DFS is memory-efficient (keeps fewer states), but not time-efficient since it may wander into long, irrelevant paths.

BFS is time-efficient for small problems but memory-hungry as it stores all nodes at each depth.

A* is generally the most efficient in practice—it balances between BFS (guaranteed shortest) and DFS (low memory) by using heuristics to guide the search.
"""